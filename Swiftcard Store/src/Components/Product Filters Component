<div x-data="productFilters()" class="flex justify-between mb-4">
  <div class="flex space-x-4">
    <select
      x-model="selectedCategory"
      @change="searchProducts"
      class="border p-2 rounded"
    >
      <option value="">All Categories</option>
      <template x-for="category in categories" :key="category">
        <option :value="category" x-text="category"></option>
      </template>
    </select>

    <div class="flex items-center">
      <input
        type="text"
        x-model="searchQuery"
        placeholder="Search products..."
        class="border p-2 rounded-l"
      />
      <button
        @click="searchProducts"
        class="bg-white text-black border border-l-0 p-2 rounded-r"
      >
        Search
      </button>
    </div>

    <select
      x-model="sortOrder"
      @change="searchProducts"
      class="border p-2 rounded"
    >
      <option value="">Sort by Price</option>
      <option value="asc">Lowest to Highest</option>
      <option value="desc">Highest to Lowest</option>
    </select>

    <button
      @click="resetFilters"
      class="bg-gray-500 text-white px-4 py-2 rounded"
    >
      Reset
    </button>
  </div>
</div>

<script>
  function productFilters() {
    return {
      categories: [],
      selectedCategory: "",
      searchQuery: "",
      sortOrder: "",
      filteredProducts: [],
      async init() {
        await this.fetchCategories();
        this.searchProducts();
      },
      async fetchCategories() {
        const response = await fetch(
          "https://fakestoreapi.com/products/categories"
        );
        const data = await response.json();
        this.categories = data;
      },
      searchProducts() {
        const searchQuery = this.searchQuery.toLowerCase();
        const categoryFilter = this.selectedCategory.toLowerCase();
        this.filteredProducts = store().products.filter((product) => {
          const matchesSearchQuery = product.title
            .toLowerCase()
            .includes(searchQuery);
          const matchesCategory =
            !categoryFilter ||
            product.category.toLowerCase() === categoryFilter;
          return matchesSearchQuery && matchesCategory;
        });

        if (this.sortOrder === "asc") {
          this.filteredProducts.sort((a, b) => a.price - b.price);
        } else if (this.sortOrder === "desc") {
          this.filteredProducts.sort((a, b) => b.price - a.price);
        }
      },
      resetFilters() {
        this.selectedCategory = "";
        this.searchQuery = "";
        this.sortOrder = "";
        this.filteredProducts = store().products;
      },
    };
  }
</script>
